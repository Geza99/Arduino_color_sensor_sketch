#include <Adafruit_ST7789.h> 
#include <SPI.h>
#include <MD_TCS230.h>   //necessary libraries for color sensor and display
#include <FreqCount.h>
#include <Adafruit_ST7735.h>
#include <Adafruit_GFX.h>


#if defined(ARDUINO_FEATHER_ESP32) // Feather Huzzah32
  #define TFT_CS         14
  #define TFT_RST        15
  #define TFT_DC         32

#elif defined(ESP8266)
  #define TFT_CS         4
  #define TFT_RST        16                                            
  #define TFT_DC         5

#else
  // For the breakout board, you can use any 2 or 3 pins.
  // These pins will also work for the 1.8" TFT shield.
  #define TFT_CS        10
  #define TFT_RST        9 // Or set to -1 and connect to Arduino RESET pin
  #define TFT_DC         8
#endif


#define cs   10  
#define dc   9   
#define rst  8   

// Color definitions
#define BLACK    0x0000
#define BLUE     0x001F
#define RED      0xF800
#define GREEN    0x07E0
#define CYAN     0x07FF
#define MAGENTA  0xF81F
#define YELLOW   0xFFE0 
#define WHITE    0xFFFF
#define GREY     0xC618

// Pin definitions
#define  S2_OUT  2
#define  S3_OUT  3
#define  OE_OUT   4    // LOW = ENABLED 

int R = 0;
int G = 0;
int B = 0;

MD_TCS230 CS(S2_OUT, S3_OUT, OE_OUT);
  
int state = 0;
int color;


Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

void setup() 
{

  Serial.begin(57600);
  
  tft.initR(INITR_BLACKTAB);   

  drawBlackScreen();
  
  tft.setCursor(20,30);
  tft.setTextColor(RED);
  tft.setTextSize(1);
  tft.print("Color");

  tft.setCursor(20,60);
  tft.setTextColor(GREEN);
  tft.setTextSize(1);
  tft.print("Recognition");

  tft.setCursor(20,90);
  tft.setTextColor(CYAN);
  tft.setTextSize(1);
  tft.print("By Geza");

  delay(3000);
  
  drawBlackScreen();

   tft.setCursor(10,30);
   tft.setTextColor(WHITE);
   tft.setTextSize(2);
   tft.print("SET BLACK");  //calibration for black
   delay(5000);
   
   CS.begin();
   CS.read();
    
}

void loop()
{
if(state ==0)
{
  if (CS.available()) {
   sensorData  sd;
   CS.getRaw(&sd); 
   CS.setDarkCal(&sd); 
   Serial.println("Black Calibration Set");
   state++;
   drawBlackScreen();

   tft.setCursor(10,30);
   tft.setTextColor(WHITE);
   tft.setTextSize(2);
   tft.print("SET WHITE"); //calibration for white

   delay(5000);
   CS.read();
  }
}
else if(state == 1)
{
 if (CS.available()) {
   sensorData  sd;
   CS.getRaw(&sd); 
   CS.setWhiteCal(&sd); 
   Serial.println("White Calibration Set");
   drawBlackScreen();
   tft.setCursor(35,30);
   tft.setTextColor(WHITE);
   tft.setTextSize(2);
   tft.print("COLOR");
   tft.drawRect(30,70,70,60,WHITE);
   state++;
  }

}else
{
  readSensor();
}
}

void drawBlackScreen()
{
  tft.fillScreen(BLACK); 
  tft.drawRect(0,0,127,159,WHITE);   //Drawing white frame
  tft.drawRect(1,1,127,159,WHITE);
}

uint16_t convertRGB24toRGB565(uint8_t r, uint8_t g, uint8_t b) //converting rgb24 to rgb65
{
  return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
}

void readSensor()
{
  static  bool  waiting = false;
  
  if (!waiting)
  {
    CS.read();
    waiting = true;
  }
  else
  {
    if (CS.available()) 
    {
      colorData  rgb;
      
      CS.getRGB(&rgb);
      Serial.print("RGB [");
      Serial.print(rgb.value[TCS230_RGB_R]);
      Serial.print(",");
      Serial.print(rgb.value[TCS230_RGB_G]);
      Serial.print(",");
      Serial.print(rgb.value[TCS230_RGB_B]);
      Serial.println("]");
      
      R = rgb.value[TCS230_RGB_R];
      G = rgb.value[TCS230_RGB_G];
      B = rgb.value[TCS230_RGB_B];
 
       color = convertRGB24toRGB565(R,G,B); //Convertion to 16bit color for the display
      
      delay(100);
    
    
         tft.setCursor(5,150);
     
      tft.setTextSize(1);
      tft.setTextColor(RED);
      tft.print(" R: ");
      tft.print(R);
       tft.setTextColor(GREEN);
      tft.print(" G: ");
      tft.print(G);
       tft.setTextColor(BLUE);
      tft.print(" B: ");
      tft.print(B);
      delay(800);
      tft.fillRect(10,138,114,20,BLACK);
        tft.fillRect(31,71,68,58,color);
      waiting = false;
    }
  }
     
}
